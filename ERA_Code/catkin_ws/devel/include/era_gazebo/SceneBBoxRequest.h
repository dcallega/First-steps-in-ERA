// Generated by gencpp from file era_gazebo/SceneBBoxRequest.msg
// DO NOT EDIT!


#ifndef ERA_GAZEBO_MESSAGE_SCENEBBOXREQUEST_H
#define ERA_GAZEBO_MESSAGE_SCENEBBOXREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <era_gazebo/DetectionBox.h>

namespace era_gazebo
{
template <class ContainerAllocator>
struct SceneBBoxRequest_
{
  typedef SceneBBoxRequest_<ContainerAllocator> Type;

  SceneBBoxRequest_()
    : bbox()  {
    }
  SceneBBoxRequest_(const ContainerAllocator& _alloc)
    : bbox(_alloc)  {
  (void)_alloc;
    }



   typedef  ::era_gazebo::DetectionBox_<ContainerAllocator>  _bbox_type;
  _bbox_type bbox;





  typedef boost::shared_ptr< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SceneBBoxRequest_

typedef ::era_gazebo::SceneBBoxRequest_<std::allocator<void> > SceneBBoxRequest;

typedef boost::shared_ptr< ::era_gazebo::SceneBBoxRequest > SceneBBoxRequestPtr;
typedef boost::shared_ptr< ::era_gazebo::SceneBBoxRequest const> SceneBBoxRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace era_gazebo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'era_gazebo': ['/home/hackfest03/catkin_ws/src/era_gazebo/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd321c86fe9be2b64c0490217178f7cc";
  }

  static const char* value(const ::era_gazebo::SceneBBoxRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd321c86fe9be2b6ULL;
  static const uint64_t static_value2 = 0x4c0490217178f7ccULL;
};

template<class ContainerAllocator>
struct DataType< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "era_gazebo/SceneBBoxRequest";
  }

  static const char* value(const ::era_gazebo::SceneBBoxRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DetectionBox bbox\n"
"\n"
"================================================================================\n"
"MSG: era_gazebo/DetectionBox\n"
"Header header\n"
"\n"
"string type\n"
"uint16 id\n"
"uint32 left\n"
"uint32 right\n"
"uint32 top\n"
"uint32 bottom\n"
"float32[] mask_1d\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::era_gazebo::SceneBBoxRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bbox);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SceneBBoxRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::era_gazebo::SceneBBoxRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::era_gazebo::SceneBBoxRequest_<ContainerAllocator>& v)
  {
    s << indent << "bbox: ";
    s << std::endl;
    Printer< ::era_gazebo::DetectionBox_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERA_GAZEBO_MESSAGE_SCENEBBOXREQUEST_H
